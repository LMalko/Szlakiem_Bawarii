
# mod_items - custom mod, contains items data, export specified or random item to main



import random

import mod_hero, mod_display

################################ Hero's enemies class:
class Items:
   def __init__(self, name, level, genre, price, location, info_list):
        # item name:
        self.name = name
        self.level = level # item level - stronger item = higher level (ex. level 4 = unique, powerful item)   
        self.genre = genre # item genre is for ex. armour/weapon/other/special(quest)
        self.price = price # price in buy/sell (concerns shops)
        self.location = location # list of maps levels, where it could be random generated (list element = lvl mapy, ex. [1,2])   
        self.info_list = info_list # contains short info about item

        # buffs parametres = bonuses for hero's attributes, f. ex.:
        # buff_str = 2 means: hero's "siła" += 2, etc.
        # if buff has negativ value, it decrases value of attrib
        # default value of buff is 0:
        self.buff_str = 0 # + "siła"
        self.buff_agg = 0 # + "zwinność"
        self.buff_per = 0 # + "percepcja"
        self.buff_int = 0 # + "inteligencja"
        self.buff_wil = 0 # + "siła woli"
        self.buff_arm = 0 # + "pancerz (act_armour)"
        self.buff_min_dmg = 0 # + "min dmg"
        self.buff_max_dmg = 0 # + "max dmg"
        # we may add life and other bonuses from items to hero

        # body: default empty = ""
        # determines where hero can wear an item. If body is empty, hero can't wear item (still can put it into bag)..
        # else: (for ex. body = ["głowa"] - program checks if key "głowa" in hero.onbody_dict == ""
        # (that means = "głowa" is empty and we can put "kaptur"), other wise program display info "głowa" is not empty (;)):
        self.body = ""


        # combat_attribute:
        # determines what hero attribute is used in combat tests, for example, if hero is using dagger,
        # main concidered attribute is aggility ("zwinność") or in case of heavy axe we use strenght ("siła")
        # empty by default
        self.combat_attribute = ""




def items_settings(name = None, loc = None, lvl = None, gen = None, hero = None, all = None):
    
    '''
    Stores items data base. 
    Creates item and export to MAIN using specific arguments:
    name = imports by name, for expample: if name = "nóż", function exports object Knife
    or
    if name (in function arguments) is not specified, item is generated by filters:
        location (loc, ex. loc = 2 - second map level),
        item level (lvl = 1,2,3...),
        genre (gen, ex. gen = "weapon": it will choose between weapon with genre = "weapon")
        then export to main 
    '''


    info_list = []

 
    #name, level, genre, price, location, damage, special, attrib_dict, body_dict, info_list

##### WEAPON ITEMS:

    # nóż (self, name, level, genre, price, location, info_list)
    knife = Items("nóż", 1, "weapon", 20, [1,2,3,4], info_list)
    knife.buff_min_dmg = 0 # + "min dmg"
    knife.buff_max_dmg = 1 # + "max dmg"
    knife.combat_attribute = "zwinność"


    club = Items("maczuga", 1, "weapon", 20, [1,2,3,4], info_list)
    club.buff_min_dmg = 1 # + "min dmg"
    club.buff_max_dmg = 1 # + "max dmg"
    club.combat_attribute = "siła"


    '''
    self.buff_str = 0 # + "siła"
    self.buff_agg = 0 # + "zwinność"
    self.buff_per = 0 # + "percepcja"
    self.buff_int = 0 # + "inteligencja"
    self.buff_wil = 0 # + "siła woli"
    self.buff_arm = 0 # + "pancerz (act_armour)"
    self.buff_min_dmg = 0 # + "min dmg"
    self.buff_max_dmg = 0 # + "max dmg"
    self.body = ""
    self.combat_attribute = ""
    '''

    # miecz (self, name, level, genre, price, location, info_list)
    sword = Items("miecz", 2, "weapon", 100, [1,2,3,4], info_list)
    sword.buff_min_dmg = 1 # + "min dmg"
    sword.buff_max_dmg = 2 # + "max dmg"
    sword.combat_attribute = "siła"
    sword.body = "prawa ręka"


##### ARMOUR ITEMS:

    # hełm (self, name, level, genre, price, location, info_list)
    helmet = Items("hełm", 1, "armour", 200, [1,2,3,4], info_list)
    helmet.buff_arm = 1 # + "pancerz (act_armour)"
    helmet.body = "głowa"

    # hełm garnczkowy +1 obrony (self, name, level, genre, price, location, info_list)
    helmet_pot = Items("hełm garnczkowy", 3, "armour", 500, [2,3,4], info_list)
    helmet_pot.buff_arm = 2 # + "pancerz (act_armour)"
    helmet_pot.body = "głowa"

    # zbroja skórzana (self, name, level, genre, price, location, info_list)
    armour_lether = Items("zbroja skórzana", 1, "armour", 200, [1,2,3,4], info_list)
    info_list = ["lekki i niedrogi typ pancerza, zapewnia dość dobrą osłonę ciała"]
    armour_lether.buff_arm = 1
    armour_lether.body = "tors"


##### JEWELS: (self, name, level, genre, price, location, info_list)

    diament = Items("diament", 4, "jewels", 500, [3,4], info_list)
    diament.info_list = ["diament! To bogactwo!!!"]
    ruby = Items("rubin", 3, "jewels", 200, [2,3,4], info_list)
    ruby.info_list = ["to bogactwo!!!"]
    jantar = Items("jantar", 2, "jewels", 200, [1,2,3,4], info_list)
    jantar.info_list = ["Jantar Lechitów! To majątek!"]



##### OTHER ITEMS: (self, name, level, genre, price, location, info_list)
    # tunika
    tunic = Items("tunika", 1, "other", 20, [1,2], info_list)
    tunic.info_list = ["tanie i przewiewne okrycie ciała, pochodzi z krain południowych"]
    tunic.body = "tors"

    wolf_skin = Items("wilcza skóra", 1, "other", 7, [1,2], info_list)
    wolf_skin.info_list = ["może to sprzedam?"]

    stale_fish = Items(u"popsuta ryba", 1, "other", 0, [0], info_list)
    stale_fish.info_list = [u"może to sprzedam?"]




##### QUEST ITEMS:    

    placek_sliwkowy = Items("placek śliwkowy", 1, "quest", 1, [1, 2], info_list)
    placek_sliwkowy.info_list = ["pyszności!"]
    wolek_zbozowy = Items("wołek zbożowy", 1, "quest", 0, [1], info_list)
    placek_sliwkowy.info_list = ["pyszności!"]




############## list of all items - we use this in functions below:
    # na razie potrzeba ręcznie dopisywać każdy przedmiot, ale to raczej nie problem
    # mogę po każdym przedmiocie robić list.append, ale nie ma tego tak dużo, żeby kompa obciążać ;)
    items_all_list = [placek_sliwkowy, wolek_zbozowy, knife, sword, helmet, club,
    helmet_pot, armour_lether, wolf_skin,
    
    
    diament, ruby, jantar
    ]






    # if item's name was specified, it will export item by given name:
    # (we may use it to random generate enemies treasures)
    item_exported_to_main = ''
    if name != None:
        
        for element in items_all_list:
            if element.name == name:
                item_exported_to_main = element

        return item_exported_to_main

    # whit "all" set on "True" we can export list of multiple items (sorted by filters):
    elif (all == True and (loc in element.location or loc == None) and (lvl == element.level or lvl == None)
    and (gen == element.genre or gen == None)):
        item_export_list = [] # temporary helper list
        for element in items_all_list:        
            item_random_list.append(element)

        return item_export_list

    # if item name or "all" wasn't specified, it will export random enemy
    # (random using optional filters - level, location, genre):
    else:
        item_random_list = [] # temporary helper list
        for element in items_all_list:        
            if (loc in element.location or loc == None) and (lvl == element.level or lvl == None) and (gen == element.genre or gen == None):
                item_random_list.append(element)
        

        # export random enemy to main function:
        item_rnd_exported_to_main = item_random_list[random.randint(0, len(item_random_list)-1)]
        
        return item_rnd_exported_to_main
        # loc = None, lvl = None, gen = None

def treasure_generator(maxloops = None, maxitem_lvl = None, item_gen = None, hero = None):
    '''
    generates list with random items, maxloops - max number of generated items,
    maxitem_lvl = max item level (from "items Class") that is allowed (if None - filter is off)
    item_gen = allowed item genre from "items Class" (ex. "weapon", if None - filter is off)
    '''
    if maxloops != 0:
    
        treasure_list = []
        if maxitem_lvl == None: maxitem_lvl = 1
        if maxloops == None: maxloops = 1
        if maxloops > 0:        
            for i in range(random.randint(1, maxloops)):
                random_level = random.randint(1, maxitem_lvl) # randomly generates item level for each loop
                generated_item = items_settings(name = None, loc = None, lvl = random_level, gen = item_gen, hero = None)
                treasure_list.append(generated_item.name)
        
        # transform treasure list to dict:
        # then update hero's inventory:
        add_remove_items_dict = mod_hero.items_list_to_dict(treasure_list)
        mod_hero.inventory_update(hero, add_remove_items_dict)
        mod_display.display_hero_chart(hero = hero)
        mod_display.display_looted_items(add_remove_items_dict)
        return hero



    """ dodaj: 
    pierścień skurczybyka
    nóż


    """
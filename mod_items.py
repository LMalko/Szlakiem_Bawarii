
# mod_items - custom mod, contains items data, export specified or random item to main



import random

################################ Hero's enemies class:
class Items:
   def __init__(self, name, level, genre, price, location, special, dmg_list, attrib_dict, body_list, info_list):
        # item name:
        self.name = name
        # item level - stronger item = higher level (ex. level 4 = unique, powerful item):
        self.level = level
        # item genre is for ex. armour/weapon/other/special(quest)
        self.genre = genre
        # price in buy/sell (concerns shops)
        self.price = price
        # "location" = list of maps levels, where it could be random generated (list element = lvl mapy, ex. [1,2])
        self.location = location
        # special = special feature of item, default = None - ex. life + 10 (regenerates hero's life point)
        self.special = special
        # damage is a list (default - empty: []) of min. and max. damage - that are added to hero's min. and max. damage
        self.dmg_list = dmg_list
        # values of attributes are added to values of hero attributes:
        self.attrib_dict = attrib_dict
        # body_list: default body_list is empty = []
        # determines where hero can wear an item. If body_list is empty, hero can't wear item (still can put it into bag)..
        # else: (for ex. body_list = ["głowa"] - program checks if key "głowa" in player_character.onbody_dict == ""
        # (that means = "głowa" is empty and we can put "kaptur"), other wise program display info "głowa" is not empty (;))
        self.body_list = body_list
        # contains short info about item:
        self.info_list = info_list



def items_settings(name = None, loc = None, lvl = None, gen = None, player_character = None):
    
    '''
    Stores items data base. 
    Creates item and export to MAIN using specific arguments:
    name = imports by name, for expample: if name = "nóż", function exports object Knife
    or
    if name (in function arguments) is not specified, item is generated by filters:
        location (loc, ex. loc = 2 - second map level),
        item level (lvl = 1,2,3...),
        genre (gen, ex. gen = "weapon": it will choose between weapon with genre = "weapon")
        then export to main 
    '''
    dmg_list = []
    attrib_dict = {}  
    body_list = []
    info_list = []
 
    #name, level, genre, price, location, damage, special, attrib_dict, body_dict, info_list

##### WEAPON ITEMS:

    # nóż
    knife = Items("nóż", 1, "weapon", 20, [1,2,3,4], None, dmg_list, attrib_dict, body_list, info_list)
    knife.dmg_list = [1,1] # means that it increase min. and max. damage by 1
    knife.body_list = ["prawa ręka"] # will check if hero has something in "prawa ręka" key in hero's onbody_dict
    
    # miecz
    sword = Items("miecz", 2, "weapon", 100, [1,2,3,4], None, dmg_list, attrib_dict, body_list, info_list)
    sword.dmg_list = [1,3] # means that it increase min. and max. damage by 1
    sword.body_list = ["prawa ręka"] # will check if hero has something in "prawa ręka" key in hero's onbody_dict

##### ARMOUR ITEMS:

    # hełm
    helmet = Items("hełm", 1, "armour", 200, [1,2,3,4], None, dmg_list, attrib_dict, body_list, info_list)
    helmet.attrib_dict = {"obrona":1} # icreases "obrona" in hero's attribute dict by 1 (dict update)
    helmet.body_list = ["głowa"]

    # hełm garnczkowy +1 obrony
    helmet1 = Items("hełm garnczkowy", 3, "armour", 500, [2,3,4], None, dmg_list, attrib_dict, body_list, info_list)
    helmet1.attrib_dict = {"obrona":2} # icreases "obrona" in hero's attribute dict by 1 (dict update)
    helmet1.body_list = ["głowa"]


##### JEWELS:

    diament = Items("diament", 4, "jewels", 500, [3,4], None, dmg_list, attrib_dict, body_list, info_list)
    diament.info_list = ["diament! To bogactwo!!!"]
    ruby = Items("rubin", 3, "jewels", 200, [2,3,4], None, dmg_list, attrib_dict, body_list, info_list)
    ruby.info_list = ["to bogactwo!!!"]



##### QUEST ITEMS:    

    placek_sliwkowy = Items("placek śliwkowy", 1, "quest", 1, [1, 2], None, dmg_list, attrib_dict, body_list, info_list)
    placek_sliwkowy.info_list = ["pyszności!"]
    wolek_zbozowy = Items("wołek zbożowy", 1, "quest", 0, [1], None, dmg_list, attrib_dict, body_list, info_list)
    placek_sliwkowy.info_list = ["pyszności!"]

##### JEWELS: 


    # data in (...) items:
    # name, level, genre, price, location, body, attrib_dict, info_list


############## list of all items - we use this in functions below:
    # na razie potrzeba ręcznie dopisywać każdy przedmiot, ale to raczej nie problem
    # mogę po każdym przedmiocie robić list.append, ale nie ma tego tak dużo, żeby kompa obciążać ;)
    items_all_list = [placek_sliwkowy, wolek_zbozowy, knife, sword, helmet,
    helmet1,
    
    
    diament, ruby
    ]






    # if item's name was specified, it will export item by given name:
    # (we may use it to random generate enemies treasures)
    item_exported_to_main = ''
    if name != None:
        
        for element in items_all_list:
            if element.name == name:
                item_exported_to_main = element

        return item_exported_to_main


    # if enemy name wasn't specified, it will export random enemy (random using optional filters - level, location, genre):
    else:
        item_random_list = [] # temporary helper list
        for element in items_all_list:        
            if (loc in element.location or loc == None) and (lvl == element.level or lvl == None) and (gen == element.genre or gen == None):
                item_random_list.append(element)
        

        # export random enemy to main function:
        item_rnd_exported_to_main = item_random_list[random.randint(0, len(item_random_list)-1)]
        
        return item_rnd_exported_to_main
        # loc = None, lvl = None, gen = None



    """ dodaj: 
    diamenty
    rubiny
    pierścień skurczybyka
    nóż


    """
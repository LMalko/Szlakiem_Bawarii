
# mod_items - custom mod, contains items data, export specified or random item to main



import random
import time

import mod_hero, mod_display

################################ Hero's enemies class:
class Items:
   def __init__(self, name, level, genre, price, location):
        # item name:
        self.name = name
        self.level = level # item level - stronger item = higher level (ex. level 4 = unique, powerful item)   
        self.genre = genre # item genre is for ex. armour/weapon/other/special(quest)
        self.price = price # price in buy/sell (concerns shops)
        self.location = location # list of maps levels, where it could be random generated (list element = lvl mapy, ex. [1,2])   


        # buffs parametres = bonuses for hero's attributes, f. ex.:
        # buff_str = 2 means: hero's "siła" += 2, etc.
        # if buff has negativ value, it decrases value of attrib
        # default value of buff is 0:
        self.item_info = ''# short info about item
        self.buff_str = '' # + "siła"
        self.buff_agg = '' # + "zwinność"
        self.buff_per = '' # + "percepcja"
        self.buff_int = '' # + "inteligencja"
        self.buff_wil = '' # + "siła woli"
        self.buff_arm = '' # + "pancerz (act_armour)"
        self.buff_min_dmg = '' # + "min dmg"
        self.buff_max_dmg = '' # + "max dmg"
        # we may add life and other bonuses from items to hero

        # body: default empty = ""
        # determines where hero can wear an item. If body is empty, hero can't wear item (still can put it into bag)..
        # else: (for ex. body = ["głowa"] - program checks if key "głowa" in hero.onbody_dict == ""
        # (that means = "głowa" is empty and we can put "kaptur"), other wise program display info "głowa" is not empty (;)):
        self.body = ""


        # combat_attribute:
        # determines what hero attribute is used in combat tests, for example, if hero is using dagger,
        # main concidered attribute is aggility ("zwinność") or in case of heavy axe we use strenght ("siła")
        # empty by default
        self.combat_attribute = ""




def items_settings(name = None, loc = None, lvl = None, gen = None, hero = None, all = None):
    
    '''
    Stores items data base. 
    Creates item and export to MAIN using specific arguments:
    name = imports by name, for expample: if name = "nóż", function exports object Knife
    or
    if name (in function arguments) is not specified, item is generated by filters:
        location (loc, ex. loc = 2 - second map level),
        item level (lvl = 1,2,3...),
        genre (gen, ex. gen = "weapon": it will choose between weapon with genre = "weapon")
        then export to main 
    '''

##### WEAPON ITEMS (parameters not fully used yet - wip):

    # nóż (self, name, level, genre, price, location, item_info)
    knife = Items("nóż", 1, "weapon", 20, [1,2,3,4])
    knife.buff_min_dmg = 0 # + "min dmg"
    knife.buff_max_dmg = 1 # + "max dmg"
    knife.combat_attribute = "zwinność"
    knife.body = "prawa ręka"
    knife.item_info = "obrażenia (max+3), zwinność"

    # nóż (self, name, level, genre, price, location, item_info)
    dagger = Items("sztylet", 2, "weapon", 120, [1,2,3,4])
    dagger.buff_min_dmg = 0 # + "min dmg"
    dagger.buff_max_dmg = 5 # + "max dmg"
    dagger.combat_attribute = "zwinność"
    dagger.body = "prawa ręka"
    dagger.item_info = "obrażenia (max+5), zwinność"

    dagger_of_agility = Items("sztylet zwinności", 4, "weapon", 700, [2,3,4])
    dagger_of_agility.buff_min_dmg = 1 # + "min dmg"
    dagger_of_agility.buff_max_dmg = 8 # + "max dmg"
    dagger_of_agility.combat_attribute = "zwinność"
    dagger_of_agility.body = "prawa ręka"
    dagger_of_agility.item_info = "zwinność +1, obrażenia (min+1, max+8), zwinność"
    dagger_of_agility.buff_agg = 1 # agility +1

    # pałka
    club = Items("maczuga", 1, "weapon", 20, [1,2,3,4])
    club.buff_min_dmg = 1 # + "min dmg"
    club.buff_max_dmg = 1 # + "max dmg"
    club.combat_attribute = "siła"
    club.body = "prawa ręka"
    club.item_info = "obrażenia (min+1, max+1), siła"

    # miecz (self, name, level, genre, price, location, item_info)
    sword = Items("miecz", 2, "weapon", 100, [1,2,3,4])
    sword.buff_min_dmg = 2 # + "min dmg"
    sword.buff_max_dmg = 4 # + "max dmg"
    sword.combat_attribute = "siła"
    sword.body = "prawa ręka"
    sword.item_info = "obrażenia (min+2, max+4), siła"

    # włócznia (self, name, level, genre, price, location, item_info)
    spear = Items("włócznia", 2, "weapon", 100, [1,2,3,4])
    spear.buff_min_dmg = 2 # + "min dmg"
    spear.buff_max_dmg = 4 # + "max dmg"
    spear.combat_attribute = "siła"
    spear.body = "prawa ręka"
    spear.item_info = "obrażenia (min+2, max+4), siła"

    axe = Items("topór", 2, "weapon", 100, [1,2,3,4])
    axe.buff_min_dmg = 3 # + "min dmg"
    axe.buff_max_dmg = 2 # + "max dmg"
    axe.combat_attribute = "siła"
    axe.body = "prawa ręka"
    axe.item_info = "obrażenia (min+3, max+2), siła"


##### ARMOUR ITEMS:

    # hełm (self, name, level, genre, price, location, item_info)
    helmet = Items("hełm", 1, "armour", 200, [1,2,3,4])
    helmet.buff_arm = 1 # + "pancerz (act_armour)"
    helmet.body = "głowa"
    helmet.item_info = "obrona +1, siła"
    helmet.combat_attribute = "siła"


    # hełm garnczkowy +1 obrony (self, name, level, genre, price, location, item_info)
    helmet_pot = Items("hełm garnczkowy", 4, "armour", 500, [2,3,4])
    helmet_pot.buff_arm = 2 # + "pancerz (act_armour)"
    helmet_pot.body = "głowa"
    helmet_pot.item_info = "obrona +2, siła"
    helmet_pot.combat_attribute = "siła"

    # zbroja skórzana (self, name, level, genre, price, location, item_info)
    armour_lether = Items("zbroja skórzana", 1, "armour", 300, [1,2,3,4])
    armour_lether.buff_arm = 1
    armour_lether.body = "tors"
    armour_lether.item_info = "obrona +1"


##### RINGS:
    # ring (self, name, level, genre, price, location, item_info)
    ring_of_strenght = Items("pierścień siły", 4, "ring", 1200, [3,4])
    ring_of_strenght.item_info = "o tym pierścieniu krążą legendy, kto go założy - ten siłacz!"
    ring_of_strenght.buff_str = 1
    ring_of_strenght.body = "palec"
    ring_of_strenght.item_info = "siła +1"

    ring_of_agility = Items("pierścień zwinności", 4, "ring", 1200, [3,4])
    ring_of_agility.item_info = "o tym pierścieniu krążą legendy, kto go założy - ten siłacz!"
    ring_of_agility.buff_agg = 1
    ring_of_agility.body = "palec"
    ring_of_agility.item_info = "zwinność +1"


##### JEWELS: (self, name, level, genre, price, location, item_info)

    
    heart_of_mountain = Items("serce góry", 6, "jewels", 1500, [3,4]) 
    heart_of_mountain.item_info = "nie do wiary, kupię za to dwie wioski! To bogactwo!!!"
    diament = Items("diament", 4, "jewels", 500, [3,4])
    diament.item_info = "diament! To bogactwo!!!"
    ruby = Items("rubin", 3, "jewels", 200, [2,3,4])
    ruby.item_info = "to bogactwo!!!"
    jantar = Items("jantar", 2, "jewels", 200, [1,2,3,4])
    jantar.item_info = "Jantar Lechitów! To majątek!"
    silver_bar = Items("sztabka srebra", 3, "jewels", 300, [2,3,4])
    silver_bar.item_info = "to bogactwo!"




##### OTHER ITEMS: (self, name, level, genre, price, location, item_info)
    # tunika
    tunic = Items("tunika", 1, "other", 20, [1,2])
    tunic.item_info = "tanie i przewiewne okrycie ciała, pochodzi z krain południowych"
    tunic.body = "tors"

    wolf_skin = Items("wilcza skóra", 1, "other", 7, [1,2])
    wolf_skin.item_info = "wilka trochę żal, ale skóra ładna i ciepła"

    giant_club = Items("olbrzymia maczuga", 1, "quest", 70, [2,3,4])
    giant_club.item_info = "broń olbrzymów, jest dla mnie za ciężka!"

    goblin_ear = Items("ucho goblina", 1, "quest", 20, [1,2])
    goblin_ear.item_info = "podobno jest za to nagroda.."

    outlaw_sign = Items("znak banity", 1, "quest", 25, [1,2])
    outlaw_sign.item_info = "podobno jest za to nagroda.." 




##### QUEST ITEMS:     "zabytkowy obraz":1, "sztabka srebra":10, "sztylet zwinności":1
    plum_cake = Items("placek śliwkowy", 1, "quest", 1, [1, 2])
    plum_cake.item_info = "pyszności!"
    corn_cob = Items("wołek zbożowy", 1, "quest", 1, [1] )
    corn_cob.item_info = "co to za robak?!"
    abacus = Items("liczydło", 4, "quest", 0, [1])
    abacus.item_info = "coś mi mówi, żeby tego nie sprzedawać.. "
    measuring_rope = Items("lina pomiarowa", 4, "quest", 0, [1])
    measuring_rope.item_info = "coś mi mówi, żeby tego nie sprzedawać.. "

    antique_picture = Items("zabytkowy obraz", 2, "quest", 0, [2]) # quest lvl 2 (mayor)
    antique_picture.item_info = "wygląda zagadkowo, może dla kogoś jest coś wart.."


    # quest z misiem lvl 1
    honey = Items("miodzik", 1, "quest", 10, [1])
    honey.item_info = "pycha!"

    mada_faka_ring = Items("pierścień skurczybyka", 2, "quest", 50, [2,3])
    mada_faka_ring.item_info = "coś mi się o uszy obiło, że lepiej zachować"





############## list of all items - we use this in functions below:
    # na razie potrzeba ręcznie dopisywać każdy przedmiot, ale to raczej nie problem
    # mogę po każdym przedmiocie robić list.append, ale nie ma tego tak dużo, żeby kompa obciążać ;)
    items_all_list = [
    plum_cake, corn_cob,
    knife, sword, helmet, club,
    dagger, axe, spear,
    dagger_of_agility,
    helmet_pot, armour_lether, wolf_skin,
    ring_of_strenght, ring_of_agility,  
    diament, ruby, jantar, heart_of_mountain, silver_bar,
    tunic,
    honey, mada_faka_ring, measuring_rope, abacus, antique_picture,
    goblin_ear, outlaw_sign, giant_club
    ]






    # if item's name was specified, it will export item by given name:
    # (we may use it to random generate enemies treasures)
    item_exported_to_main = ''
    if name != None:
        
        for element in items_all_list:
            if element.name == name:
                item_exported_to_main = element

        return item_exported_to_main

    # whit "all" set on "True" we can export list of multiple items (sorted by filters):
    elif (all == True and (loc in element.location or loc == None) and (lvl == element.level or lvl == None)
    and (gen == element.genre or gen == None)):
        item_export_list = [] # temporary helper list
        for element in items_all_list:      
            item_random_list.append(element)

        return item_export_list

    # if item name or "all" wasn't specified, it will export random enemy
    # (random using optional filters - level, location, genre):
    else:
        item_random_list = [] # temporary helper list
        for element in items_all_list:        
            if (loc in element.location or loc == None) and (lvl == element.level or lvl == None) and (gen == element.genre or gen == None):
                item_random_list.append(element)
        

        # export random enemy to main function:
        item_rnd_exported_to_main = random.choice(item_random_list) #[random.randint(0, len(item_random_list)-1)]
        
        return item_rnd_exported_to_main
        # loc = None, lvl = None, gen = None

def treasure_generator(maxloops=None, maxitem_lvl=None, item_gen=None, hero=None):
    '''
    generates list with random items, maxloops - max number of generated items,
    maxitem_lvl = max item level (from "items Class") that is allowed (if None - filter is off)
    item_gen = allowed item genre from "items Class" (ex. "weapon", if None - filter is off)
    '''
    if maxloops != 0:
    
        treasure_list = []
        if maxitem_lvl == None: maxitem_lvl = 1
        if maxloops == None: maxloops = 1
        if maxloops > 0:        
            for i in range(random.randint(1, maxloops)):
                random_level = random.randint(1, maxitem_lvl) # randomly generates item level for each loop
                generated_item = items_settings(name=None, loc=None, lvl=random_level, gen=item_gen, hero=None)
                if generated_item.genre != "quest": # block quest items
                    treasure_list.append(generated_item.name)
        
        
        # transform treasure list to dict:
        # then update hero's inventory:
        add_remove_items_dict = mod_hero.items_list_to_dict(treasure_list)
        mod_hero.inventory_update(hero, add_remove_items_dict)
        mod_display.display_hero_chart(hero=hero)
        mod_display.display_looted_items(add_remove_items_dict)
        mod_display.pause()

        return hero

    else: # if nothing added to hero inventory (bag)
        print('\n- nie tym razem...')
        mod_display.pause()


def item_dict_generator(hero=None, level=None):
    '''
    generate items dict: key = item number, value = list of item specs (name, price, info).. ex. {'1': ['knife','100','damage+2, agility']...}
    '''
    items_gen_dict = {}
    item_already_gen = [] # block items, that already are in shop assortment
    item_to_generate = random.randint(5,9) # specify how many items can be in shop assortment
    count = 1
    while len(items_gen_dict.keys()) < item_to_generate:
        level = random.randint(1,4) # specify how high level items can be added to sell assortment
        # import item attributes by name of item from mod_items:
        item = items_settings(name=None, loc=None, lvl=level, gen=None, hero=None, all=None)
        if item.name not in item_already_gen and item.genre != 'quest': # blocker
            item_already_gen.append(item.name)
            item_parametres = [] # list with item attributes (future dict values)
            item_parametres += [item.name, str(item.price), item.item_info]
            items_gen_dict[str(count)] = item_parametres
            count += 1
            # result is dict with numbers (keys) and list od object attributes (values)
            
    return items_gen_dict


def generate_hero_items_to_sell_dict(hero):
    '''
    generate items dict from hero inventory, used in shop sell function
    in dict: key = item number (1, 2, 3, 4)
    value = list of item specs (name, price, quantity).. ex. {'1': ['knife','100','damage+2, agility']...}
    '''
    items_to_sell_dict = {}
    for number, item_name in enumerate(hero.inventory_dict):
        item_parametres = [] # list with item parametres (to add to dict key value)
        # import item attributes by name of item from mod_items:
        item = items_settings(name=item_name, loc=None, lvl=None, gen=None, hero=None, all=None)
        # list (future dict values) append by item name, price and quantity in hero inventory:
        item_parametres += [item.name, str(item.price), str(hero.inventory_dict[item_name])]
        items_to_sell_dict[str(number+1)] = item_parametres
        # result is dict with numbers (keys) and list od object attributes (values)
            
    return items_to_sell_dict


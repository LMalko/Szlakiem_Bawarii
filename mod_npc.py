
# mod_npc - custom mod, contains npc / quest data
# function npc_settings(name = None, loc = None, lvl = None, gen = None) load specified or random oponent to main

import random, mod_hero, mod_items

################################ NPC class:
class Npc:
   def __init__(self, name, location_list):
        self.name = name
        self.location_list = location_list
        self.inventory_dict = {}
        self.speach_list = []
        ###
        self.map_symbol = ""
        self.quest = None # if true - it's quest character
        self.shop = None # if true - it's a shop keeper with buy/sell option

     

def npc_settings(name = None, loc = None, gen = None):
    '''
    Stores NPC data base. 
    Creates NPC and export to MAIN using specific arguments:
    name = imports by name, for expample: if name = "wilk", function exports object WOLF
    or
    if name (in function arguments) is not specified, enemy is generated by filters:
        location (loc, ex. loc = 2 - second map level),
        enemy level (lvl = 1,2,3...),
        genre (gen, ex. gen = "animal": it will choose between enemies with genre = "animal")
        then export to main 
    '''

    treasure_dict = {} # contains items, that can be gift to hero
    speach_list = [] # contains statments, that can be delivered to hero (if they ar not on hero speach_blocked_list)
    # data in (...) are npc:
    # name, life, level, xp4hero, genre, location (list), attrib_dict, treasure_dict, specials_list, speach_list

    #   wieśniak (name, location_list, inventory_dict, speach_list)
    villager = Npc("wieśniak", [1])
    villager.speach_list = ["Jak się masz?", "Dużo roboty", "Stara mnie pogoniła", "Ide po cebule", "bry, bry",
    "słyszałem o niedźwiedziu, który kradnie rzeczy", "uważaj na wilki i gobliny",
    "podobno leśniczego okradli" ]
    villager.map_symbol = "V"

    villager1 = Npc("wieśniak", [1])
    villager.speach_list = ["Jak się masz?", "Dużo roboty", "Stara mnie pogoniła", "Ide po cebule", "bry, bry",
    "słyszałem o niedźwiedziu, który kradnie rzeczy", "uważaj na wilki i gobliny",
    "podobno leśniczego okradli" ]

    mushrooman = Npc("grzybiarz", [1])
    mushrooman.speach_list = ["Grzybów mało w tym roku", "Znów robaczywe", "Patrz, jaki borowik!",
    "Poszedłbym głębiej w las, ale dużo niedźwiedzi", "Słyszałem, że leśniczy potrzebuje pomocy",
    "podobne gdzieś tu jest bestia, która gada", "strasznie tu czasem", "uważaj na wilki",
    "dużo tu szczurołaków", "podobno dziewczynka w czerwonym kapturze ma problem z babcią"]
    mushrooman.map_symbol = "M"

    hans = Npc("Hans z wioski", [1])
    hans.speach_list = ["w sąsiedniej krainie moja wioska potrzebuje pomocy - hojnie nagrodzimy",
    "Słyszałem, że leśniczy potrzebuje pomocy", "ponoć jest tu obóz niesłusznie rozbitych",
    "podobne gdzieś tu jest bestia, która gada", "strasznie tu czasem", "uważaj na wilki",
    "dużo tu szczurołaków"]

    gretchel = Npc("Gretchel", [1])
    gretchel.speach_list = ["ładna jestem, co nie? Nie?! Twoja strata!", "(tupie nóżką)", "(puszcza oko)",
    "słyszałam o leśniczym, który potrzebuje pomocy..", "podobno dziewczynka w kapturze ma problem z babcią",
    "dużo tu szczurołaków"]



    # npc_regular_list contains list with not quest npc to generate and export to main:
    npc_regular_list = [
    
    villager, mushrooman, hans, gretchel



    ]

    # npc_regular_list contains list with  QUEST npc to generate and export to main:
    npc_quest_list = [



    ]


    npc_all_list = npc_regular_list + npc_quest_list # npc_all_list contains list of all NPC


    # if NPC name was specified, it will export NPC by given name:
    npc_exported_to_main = ''
    if name != None:
        
        for element in npc_all_list:
            if element.name == name:
                npc_exported_to_main = element

        return npc_exported_to_main


    # if enemy name wasn't specified, it will export random enemy (random using optional filters - level, location, genre):
    else:
        npc_random_list = []
         # temporary helper list
        tmp_lvl = 0 # helps in loop below:
        for element in npc_all_list:
            if (loc in element.location_list or loc == None) and (gen == element.quest or gen == None):
                npc_random_list.append(element)
        

        # export random npc to main function:
        npc_rnd_exported_to_main = npc_random_list[random.randint(0, len(npc_random_list)-1)]
        
        return npc_rnd_exported_to_main




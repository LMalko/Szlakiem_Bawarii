
# mod_enemy - custom mod, contains enemy data
# function enemy_settings(name = None, loc = None, lvl = None, gen = None) load specified or random oponent to main

import random

################################ Hero's enemies class:
class Enemy:
   def __init__(self, name, actualLife, level, act_armour, genre, location, attrib_dict, treasure_dict, specials_list, speach_list, dmg_list):
        self.name = name # enemy name
        self.actualLife = actualLife # enemylife points
        self.level = level # enemy exp level
        self.act_armour = act_armour # armour points - buffs enemy defend
        self.genre = genre # enemy genre (beast/animal/quest, etc..)
        self.location = location # specified enemy location (game level)
        self.attrib_dict = attrib_dict # dict with enemy attributes
        self.treasure_dict = treasure_dict # default enemy's treasure (not randomly generated)
        self.specials_list = specials_list # short info about enemy to display
        self.speach_list = speach_list # randomly generated statment to display
        self.dmg_list = dmg_list # min and max monster damage
        self.attack = 0 # initial attack points
        self.defend = 0 # initial defend points
        self.courage = 0 # initial courage points  TODO - wip

        # maxdrop determines what is max item drop from monster
        #...(f.ex. 3 = hero may recieve max 3 items (pieces) from dead monster )
        # default = 0 
        self.maxdrop = 0


        # maxdrop_lvl determines what is max item level that could be drop from dead monster
        # default = enemy.level+1
        self.maxdrop_lvl = self.level+1


        # enemy combat_attribute:
        # determines what enemy attribute is used in combat tests, it set by function:
        # combat_attribute_default(enemy = None) int his mod
        self.combat_attribute = None

        # variables used in quests - to manage quest mechanic:
        self.quest_condition = ""
        self.quest_info = ""

 
        # ww. "location" przyjmuje wartość elementów listy (element = lvl mapy)
        # ...w ten sposób decydujemy, czy dany przeciwnik może się pojawić w danyn lvlu
def enemy_settings(name = None, loc = None, lvl = None, gen = None):
    '''
    Stores enemies data base. 
    Creates enemy and export to MAIN using specific arguments:
    name = imports by name, for expample: if name = "wilk", function exports object WOLF
    or
    if name (in function arguments) is not specified, enemy is generated by filters:
        location (loc, ex. loc = 2 - second map level),
        enemy level (lvl = 1,2,3...),
        genre (gen, ex. gen = "animal": it will choose between enemies with genre = "animal")
        then export to main 
    '''
############################# REGULAR enemy (not quest) - randomly imported in random fight events

    attrib_dict = {} # pusty słownik dla atrybutów przeciwników
    treasure_dict = {} # pusty słownik z miejscem na przedmioty u przeciwników (można to wykorzystać m.in. do "losowania łupu")
    specials_list = [] # pusty słownik z miejscem na cechy specjalne (możemy je wyświetlać w trakcie walki) - domyślnie pusta
    speach_list = [] # zawiera kwestie wypowiadane przez przeciwnika w czasie walki (możemy je losować :) ) - domyślnie pusta
    dmg_list = [] # contains min and max dmg ([min, max])
    # data in (...) are enemy:
    # name, life, level, xp4hero, genre, location (list), attrib_dict, treasure_dict, specials_list, speach_list

    #  Wilk
    wolf = Enemy(u"wilk",20, 1, 1, "animal", [1,2], attrib_dict, treasure_dict, specials_list, speach_list, [1,3])
    wolf.attrib_dict = {u"siła":1, "zwinność":3, "percepcja":3, "inteligencja":1, "siła woli":1}
    wolf.speach_list = [u"wrrrr", "auuuuuuuuuuuuu!"]
    wolf.specials_list = [u"szybki skubaniec!"]
    wolf.treasure_dict = {u"wilcza skóra":1}
    wolf.maxdrop = 0

    # Szczurołak
    ratman = Enemy(u"szczurołak",12, 1, 1, "beast", [1,2], attrib_dict, treasure_dict, specials_list, speach_list, [1,6])
    ratman.attrib_dict = {u"siła":1, "zwinność":3, "percepcja":3, "inteligencja":1, "siła woli":1}
    ratman.speach_list = [u"wrrrr", "(sapie)"]
    ratman.specials_list = [u"dość szybki jest!"]
    ratman.maxdrop = 0

    # Goblin
    goblin = Enemy(u"goblin",22, 1, 2, "beast", [1,2], attrib_dict, treasure_dict, specials_list, speach_list, [2,7])
    goblin.attrib_dict = {u"siła":2, "zwinność":3, "percepcja":2, "inteligencja":1, "siła woli":1}
    goblin.speach_list = [u"Ja ubić ludzia!", "Ty trup!"]
    goblin.treasure_dict = {u"ucho goblina":1}
    goblin.maxdrop = 2

   # Hobgoblin
    hobgoblin = Enemy(u"Hobgoblin",25, 2, 3, "beast", [1,2,3,4], attrib_dict, treasure_dict, specials_list, speach_list, [3,6])
    hobgoblin.attrib_dict = {u"siła":4, "zwinność":2, "percepcja":2, "inteligencja":1, "siła woli":1}
    hobgoblin.speach_list = [u"Ha! Ja ubić ludzia!", "Ty trup!", "Walka!", "Arghhh!", "Dyszy.."]
    hobgoblin.specials_list = [u"Silny skubaniec.."]
    hobgoblin.treasure_dict = {u"sztabka srebra":1, "ucho goblina":1}
    hobgoblin.maxdrop = 2

    # Banita
    outlaw = Enemy(u"banita",25, 1, 0, "human", [1,2,3], attrib_dict, treasure_dict, specials_list, speach_list, [2,6])
    outlaw.attrib_dict = {u"siła":2, "zwinność":2, "percepcja":2, "inteligencja":1, "siła woli":1}
    outlaw.speach_list = [u"Zostaw mnie!", "A masz!", "Co tam masz w sakiewce?", "Już ja powiem wszystko hersztowi!"]
    outlaw.treasure_dict = {u"znak banity":1}
    outlaw.specials_list = [u"Kradnie i porywa", "Plaga krainy", "Słabowaty"]
    outlaw.maxdrop = 3


     # Skurczybyk
    scoundrel = Enemy(u"skurczybyk",30, 3, 2, "human", [2,3], attrib_dict, treasure_dict, specials_list, speach_list, [2,8])
    scoundrel.attrib_dict = {u"siła":2, "zwinność":4, "percepcja":3, "inteligencja":1, "siła woli":1}
    scoundrel.treasure_dict = {u"pierścień skurczybyka":1}
    scoundrel.speach_list = [u"Co tam masz w sakiewce?", "Złoto albo śmierć!", "Kto zadziera ze skurczybykiem, ten frajer!"]
    scoundrel.specials_list = [u"Straszna menda", "Lepkie ręce"]
    scoundrel.maxdrop = 2



    #   Miś
    bear = Enemy(u"niedźwiedź",28, 2, 5, "animal", [1,2,3,4], attrib_dict, treasure_dict, specials_list, speach_list, [2,5])
    bear.attrib_dict = {u"siła":4, "zwinność":2, "percepcja":2, "inteligencja":1, "siła woli":1}
    bear.speach_list = [u"Mrrrrr!", "Wrrrrrr!", "Rgh!"]
    bear.speach_list = [u"wrrrr...", "yyyy...", "jeść..", "głód...", "auuuuu..."]

#   Wilkołak (semi strong opponent)
    werewolf = Enemy(u"wilkołak", 37, 3, 3, "beast", [2, 3, 4], attrib_dict, treasure_dict, specials_list, speach_list, [1,10])
    werewolf.attrib_dict = {u"siła":3,"zwinność":4, "percepcja":3, "inteligencja":1, "siła woli":1}
    werewolf.treasure_dict = {u"wilcza skóra":1}
    werewolf.speach_list = [u"wrrrr...", "yyyy...", "jeść..", "głód...", "auuuuu..."]
    werewolf.specials_list = [u"szybki i wściekły", "wiecznie głodny"]
    werewolf.maxdrop = 2


    #   Ogr (strong opponent)
    ogr = Enemy(u"ogr", 50, 3, 6, "beast", [2, 3, 4], attrib_dict, treasure_dict, specials_list, speach_list, [5,10])
    ogr.attrib_dict = {u"siła":4,"zwinność":2, "percepcja":1, "inteligencja":1, "siła woli":1}
    ogr.speach_list = [u"Czo to...", "yyyy...", "ja stracha ty..", "Wont mi stomd!", "<czka>"]
    ogr.specials_list = [u"Okrótna siła", "Głupi jak but", "Niezdara", "Zgniata czaszki"]
    ogr.maxdrop = 4

    #   Troll (strong opponent)
    troll = Enemy(u"troll", 75, 4, 7, "beast", [3, 4], attrib_dict, treasure_dict, specials_list, speach_list, [9,11])
    troll.attrib_dict = {u"siła":5, "zwinność":1, "percepcja":1, "inteligencja":1, "siła woli":2}
    troll.speach_list = [u"U mnie głód! Ty smakowite!", "Ty grube!", "Ty ładne i smaczne!", "Argh!", "(warczy)"]
    troll.specials_list = [u"Kamienna skóra", "Niezdara", "Okrótna siła"]
    troll.maxdrop = 4

    #   Olbrzym górski
    mountain_giant = Enemy(u"olbrzym górski", 70, 4, 7, "beast", [3, 4], attrib_dict, treasure_dict, specials_list, speach_list, [7,15])
    mountain_giant.attrib_dict = {u"siła":6, "zwinność":1, "percepcja":1, "inteligencja":1, "siła woli":2}
    mountain_giant.treasure_dict = {u"sztabka srebra":random.randint(1,3), "diament":random.randint(1,3), "olbrzymia maczuga": 1}
    mountain_giant.speach_list = [u"Ty chcieć mi odebrać błyszczące?!", "Twój czerep nada się na ząb!", "(straszny ryk)", "Gnieść, łupić!"]
    mountain_giant.specials_list = [u"Olbrzymia wytrzymałość", "Okrótna siła"]
    mountain_giant.maxdrop = 5



    #################################### quest/special enemies: (not randomly generate)

    #   Złodziejski miś (QUEST in lvl 1)
    thievish_bear_quest = Enemy("Złodziejski Miś",33, 2, 4, "quest" , [2], attrib_dict, treasure_dict, specials_list, speach_list, [3,6])
    thievish_bear_quest.attrib_dict = {"siła":5, "zwinność":1, "percepcja":1, "inteligencja":2, "siła woli":2}
    thievish_bear_quest.treasure_dict = {"liczydło":1, "lina pomiarowa":1}
    thievish_bear_quest.speach_list = [u"Ten gupi myśliwy Cię przysłał?", "(obok miśka leżą jakieś instrumenty miernicze..)"]
    thievish_bear_quest.specials_list = [u"Ten miś mówi!", "Na szyi ma linę, a pod ogonem liczydło"]
    thievish_bear_quest.quest_condition = "Zdobyto narzędzia pomiarowe"
    thievish_bear_quest.quest_info = "No proszę, jakieś dziwne instrumenty - jakby do mierzenia.. Ktoś o tym wspominał.."

    #   Zły wilk (QUEST in lvl 1) - quest czerwonego kapturka
    wolf_special_quest = Enemy("Zły Wilk",18, 1, 0, "quest" , [1], attrib_dict, treasure_dict, specials_list, speach_list, [2,5])
    wolf_special_quest.attrib_dict = {"siła":2, "zwinność":3, "percepcja":2, "inteligencja":1, "siła woli":2}
    wolf_special_quest.treasure_dict = {"wilcza skóra":1}
    wolf_special_quest.speach_list = [u"Ty chcesz wyciągnąć Babcię? Po moim trupie!"]
    wolf_special_quest.specials_list = [u"Ten wilk mówi!", "Ma wypchany brzuch (zapewne Babcią!)"]
    wolf_special_quest.quest_condition = "Babcia uratowana"
    wolf_special_quest.quest_info = "Jakaś Babcia wyskoczyła z wilczego brzucha! Mówi coś o Czerwonym Kapturku.. "


    #   Herszt bandytów (QUEST in lvl 1)
    ringleader = Enemy("Herszt bandytów",40, 2, 2, "quest" , [2], attrib_dict, treasure_dict, specials_list, speach_list, [3,5])
    ringleader.attrib_dict = {"siła":2, "zwinność":3, "percepcja":2, "inteligencja":2, "siła woli":2}
    ringleader.treasure_dict = {"zabytkowy obraz":1, "sztabka srebra":3, "sztylet zwinności":1}
    ringleader.speach_list = [u"No co, chodź na solo!", "No dawaj mi tu!"]
    ringleader.specials_list = [u"Herszt bandy! ", "Straszna menda! ", "Sprytny jest.. "]
    ringleader.quest_condition = "Zdobyto zabytkowy obraz"
    ringleader.quest_info = "Zdobyto obraz Sołtysa! Idź do niego po nagrodę.. "


    #   Troll Silnoręki (QUEST in lvl 2)
    troll_strong_hand = Enemy("Troll Silnoręki",75, 4, 11, "quest", [2], attrib_dict, treasure_dict, specials_list, speach_list, [2,12])
    troll_strong_hand.attrib_dict = {u"siła":7, "zwinność":2, "percepcja":1, "inteligencja":1, "siła woli":2}
    troll_strong_hand.treasure_dict = {u"sztabka srebra":random.randint(1,3), "rubin":random.randint(1,8)}
    troll_strong_hand.speach_list = [u"Chcesz pokonać przełęcz? Po moim trupie!", "A masz!", "Ja cie zjeść!",
    "(przeraźliwy ryk)"]
    troll_strong_hand.specials_list = [u"Przeraźliwy! ", "Śmierć się zbliża! "]
    troll_strong_hand.quest_info = "Troll pokonany! Możesz przekroczyć portal! "
    


############## list with all enemies - we use this in functions below (to summon enemy by name):
    # na razie potrzeba ręcznie dopisywać każdego przeciwnika, ale to raczej nie problem
    # mogę po każdym przeciwniku robić list.append, ale nie ma tego tak dużo, żeby kompa obciążać ;)
    enemies_all_list = [wolf, hobgoblin, ratman, goblin, scoundrel, bear, ogr, troll, mountain_giant, werewolf, outlaw,
    thievish_bear_quest, wolf_special_quest, ringleader, troll_strong_hand]

############## list with random enemies - we use this in functions below (to random enemy using filters),
    # quest monsters are excluded:
    enemies_random_list = [wolf, ratman, goblin, hobgoblin, scoundrel, bear, ogr, troll, mountain_giant, werewolf, outlaw
    ]
    
    # if enemy name was specified, it will export enemy by given name:
    enemy_exported_to_main = ''
    if name != None:
        
        for element in enemies_all_list:
            if element.name == name:
                enemy_exported_to_main = element

        return enemy_exported_to_main


    # if enemy name wasn't specified, it will export random enemy (random using optional filters - level, location, genre):
    else:
        enemy_random_list = []
         # temporary helper list
        for element in enemies_random_list:
            if (loc in element.location or loc == None) and (lvl == element.level or lvl == None) and (gen == element.genre or gen == None):
                enemy_random_list.append(element)
        

        # export random enemy to main function:
        if loc: # if location != None - filter enemy by location:
            enemy_filtered_by_location = [enemy for enemy in enemy_random_list if loc in enemy.location]
            enemy_rnd_exported_to_main = random.choice(enemy_filtered_by_location)

        else:
            enemy_rnd_exported_to_main = random.choice(enemy_random_list)

        return enemy_rnd_exported_to_main



def attack_points_calc(enemy = None):
    ''' calculates enemy attack ability '''
    enemy.attack = 2*enemy.attrib_dict["siła"]+2*enemy.attrib_dict["zwinność"]+enemy.attrib_dict["inteligencja"]
    
    return enemy.attack


def defend_points_calc(enemy = None):
    ''' calculates enemy defend ability '''
    enemy.defend = 3*enemy.attrib_dict["zwinność"]+enemy.attrib_dict["siła"]+enemy.attrib_dict["inteligencja"]+enemy.act_armour
    
    return enemy.defend


def combat_attribute_default(enemy = None):
    '''set default value of combat_attribute'''
    if enemy.attrib_dict["siła"] >= enemy.attrib_dict["zwinność"]:
        enemy.combat_attribute = "siła"
        return enemy.combat_attribute
    else:
        enemy.combat_attribute = "zwinność"
        return enemy.combat_attribute

def enemy_info(enemy=None):    
    '''display shot info about enemy (imported from enemy specials_list and speach_list)'''
    if len(enemy.speach_list) > 0:
        print(enemy.name,"do Ciebie:",'"'+ random.choice(enemy.speach_list)+'"\n')
    if len(enemy.specials_list) > 0:
        print(enemy.name,"ma właściwość:", random.choice(enemy.specials_list))
    

def enemy_gold_reward(enemy=None):
    '''
    calculate gold from defeated enemy
    '''
    if enemy.genre != 'animal':
        looted_gold = (enemy.level ** enemy.level) * random.randint(1, 5) # geometric increase from enemy level

    else:
        looted_gold = 0
    
    return looted_gold






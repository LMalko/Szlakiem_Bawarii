
# mod_enemy - custom mod, contains enemy data
# function enemy_settings(name = None, loc = None, lvl = None, gen = None)
# load specified or random opponent to main

import random


class Enemy:

    def __init__(
        self, name, actualLife, level,
        act_armour, genre, location, dmg_list
    ):
        self.name = name  # enemy name
        self.actualLife = actualLife  # enemylife points
        self.level = level  # enemy exp level
        self.act_armour = act_armour  # armour points - buffs enemy defend
        self.genre = genre  # enemy genre (beast/animal/quest, etc..)
        self.location = location  # specified enemy location (game level)
        self.dmg_list = dmg_list  # min and max monster damage
        # tuple with enemy attributes:
        # (strenght, agility, perception, intelligence, will power)
        # next it's transformed to dict (analogous to hero attrib dict)
        self.attrib = ()
        self.treasure_dict = {}  # default enemy's treasure
        self.specials_list = []  # short info about enemy to display
        self.speach_list = []  # randomly generated statment
        self.attack = 0  # initial attack points
        self.defend = 0  # initial defend points
        self.courage = 0  # initial courage points  TODO - wip

        # maxdrop determines what is max item drop from monster
        # ...(f.ex. 3 = hero may recieve max 3 items (pieces)
        # from dead monster)
        # default = 0
        self.maxdrop = 0
        # maxdrop_lvl determines what is max item level
        # that could be drop from dead monster
        # default = enemy.level+1
        self.maxdrop_lvl = self.level+1

        # enemy combat_attribute:
        # determines what enemy attribute is used in combat tests,
        # value is set by function:
        # 'combat_attribute_default(enemy=None)' in this mod
        self.combat_attribute = None

        # variables used in quests - to manage quest mechanic:
        self.quest_condition = ""
        self.quest_info = ""


def enemy_settings(name=None, loc=None, lvl=None, gen=None):
    '''
    Stores enemies data base.
    Creates enemy and export to MAIN using specific arguments:
    name = imports by name, for expample: if name = "wilk",
    function exports object WOLF
    or
    if name (in function arguments) is not specified,
    enemy is generated by filters:
        location (loc, ex. loc = 2 - second map level),
        enemy level (lvl = 1,2,3...),
        genre (gen, ex. gen = "animal":
        it will choose between enemies with genre = "animal")
        then export to main
    '''
    # REGULAR enemy (not quest) - randomly imported in random fight events
    #  Wilk
    wolf = Enemy("wilk", 20, 1, 1, "animal", [1, 2], [1, 3])
    wolf.attrib = (1, 3, 3, 1, 1)
    wolf.speach_list = ["wrrrr", "auuuuuuuuuuuuu!"]
    wolf.specials_list = ["szybki skubaniec!"]
    wolf.treasure_dict = {"wilcza skóra": 1}

    # Szczurołak
    ratman = Enemy("szczurołak", 12, 1, 1, "beast", [1, 2], [1, 6])
    ratman.attrib = (1, 3, 3, 1, 1)
    ratman.speach_list = [u"wrrrr", "(sapie)"]
    ratman.specials_list = [u"dość szybki jest!"]

    # Goblin
    goblin = Enemy("goblin", 22, 1, 2, "beast", [1, 2], [2, 7])
    goblin.attrib = (2, 3, 3, 1, 2)
    goblin.speach_list = [
        "Ja ubić ludzia!", "Ty trup!", "Gupia szłowiek"
        ]
    goblin.treasure_dict = {"ucho goblina": 1}
    goblin.maxdrop = 1

    # Hobgoblin
    hobgoblin = Enemy("Hobgoblin", 25, 2, 3, "beast", [1, 2, 3, 4], [3, 6])
    hobgoblin.attrib = (3, 4, 3, 2, 2)
    hobgoblin.speach_list = [
        "Ha! Ja ubić ludzia!", "Ty trup!", "Walka!", "Arghhh!", "Dyszy.."
        ]
    hobgoblin.specials_list = ["Zwinny jest"]
    hobgoblin.treasure_dict = {"nóż": 1, "ucho goblina": 1}
    hobgoblin.maxdrop = 2

    # Banita
    outlaw = Enemy(u"banita", 25, 1, 0, "human", [1, 2, 3], [2, 6])
    outlaw.attrib = (2, 3, 2, 2, 2)
    outlaw.speach_list = [
        "Zostaw mnie!", "A masz!", "Co tam masz w sakiewce?",
        "Już ja powiem wszystko hersztowi!"
        ]
    outlaw.treasure_dict = {"znak banity": 1}
    outlaw.specials_list = ["Kradnie i porywa", "Plaga krainy", "Słabowaty"]
    outlaw.maxdrop = 2

    # Skurczybyk
    scoundrel = Enemy("skurczybyk", 30, 3, 2, "human", [2, 3], [2, 10])
    scoundrel.attrib = (3, 4, 2, 2, 2)
    scoundrel.treasure_dict = {"pierścień skurczybyka": 1}
    scoundrel.speach_list = [
        "Co tam masz w sakiewce?", "Złoto albo śmierć!",
        "Kto zadziera ze skurczybykiem, ten frajer!"
        ]
    scoundrel.specials_list = ["Straszna menda", "Lepkie ręce"]
    scoundrel.maxdrop = 2

    # Miś
    bear = Enemy("niedźwiedź", 35, 3, 5, "animal", [1, 2, 3], [4, 5])
    bear.attrib = (4, 2, 3, 2, 3)
    bear.treasure_dict = {"niedźwiedzia skóra": 1}
    bear.speach_list = ["Mrrrrr!", "Wrrrrrr!", "Rgh!"]
    bear.speach_list = [
        "Silny i wytrzymały"
        ]

    # Wilkołak (semi strong opponent)
    werewolf = Enemy("wilkołak", 37, 3, 3, "beast", [2, 3, 4], [3, 10])
    werewolf.attrib = (3, 4, 3, 2, 2)
    werewolf.treasure_dict = {"wilcza skóra": 1}
    werewolf.speach_list = [
        "wrrrr...", "yyyy...", "jeść..",
        "głód...", "auuuuu..."
        ]
    werewolf.specials_list = [
        "szybki i wściekły", "wiecznie głodny"
        ]
    werewolf.maxdrop = 2

    # Ogr (strong opponent)
    ogr = Enemy("ogr", 50, 3, 8, "beast", [2, 3, 4], [8, 10])
    ogr.attrib = (6, 2, 2, 1, 3)
    ogr.speach_list = [
        "Czo to...", "yyyy...", "ja stracha ty..",
        "Wont mi stomd!", "<czka>"
        ]
    ogr.specials_list = [
        "Okrótna siła", "Głupi jak but",
        "Niezdara", "Zgniata czaszki"
        ]
    ogr.maxdrop = 4

    # Troll (strong opponent)
    troll = Enemy("troll", 75, 4, 7, "beast", [3, 4], [9, 11])
    troll.attrib = (8, 2, 2, 1, 2)
    troll.speach_list = [
        "U mnie głód! Ty smakowite!", "Ty grube!",
        "Ty ładne i smaczne!", "Argh!", "(warczy)"
        ]
    troll.specials_list = ["Kamienna skóra", "Niezdara", "Okrótna siła"]
    troll.maxdrop = 4

    # Olbrzym górski
    mountain_giant = Enemy(
        "olbrzym górski", 70, 4, 7, "beast", [3, 4], [7, 15]
        )
    mountain_giant.attrib = (9, 1, 2, 2, 3)
    mountain_giant.treasure_dict = {
        "sztabka srebra": random.randint(0, 2),
        "diament": random.randint(0, 2),
        "olbrzymia maczuga": 1
        }
    mountain_giant.speach_list = [
        "Ty chcieć mi odebrać błyszczące?!", "Twój czerep nada się na ząb!",
        "(straszny ryk)", "Gnieść, łupić!"
        ]
    mountain_giant.specials_list = [u"Olbrzymia wytrzymałość", "Okrótna siła"]
    mountain_giant.maxdrop = 5

    # QUEST / SPECIAL (UNIQUE) ENEMIES:  (not randomly generate)

    # Złodziejski miś (QUEST in lvl 1)
    thievish_bear_quest = Enemy(
        "Złodziejski Miś", 33, 2, 4, "quest", [2], [3, 6]
        )
    thievish_bear_quest.attrib = (5, 1, 2, 2, 1)
    thievish_bear_quest.treasure_dict = {
        "liczydło": 1, "lina pomiarowa": 1, "niedźwiedzia skóra": 1
        }
    thievish_bear_quest.speach_list = [
        "Ten gupi myśliwy Cię przysłał?",
        "Nie ma nic lepszego niż miodzik!"
        ]
    thievish_bear_quest.specials_list = ["Ten miś mówi!"]
    thievish_bear_quest.quest_condition = "Zdobyto narzędzia pomiarowe"
    thievish_bear_quest.quest_info = (
        "jakie dziwne instrumenty - jakby do mierzenia. Ktoś o tym wspominał.."
        )

    #   Zły wilk (QUEST in lvl 1) - quest czerwonego kapturka
    wolf_special_quest = Enemy("Zły Wilk", 18, 1, 0, "quest", [1], [2, 5])
    wolf_special_quest.attrib = (2, 3, 2, 1, 1)
    wolf_special_quest.treasure_dict = {"wilcza skóra": 1}
    wolf_special_quest.speach_list = [
        "Ty chcesz wyciągnąć Babcię? Po moim trupie!"
        ]
    wolf_special_quest.specials_list = [
        "Ten wilk mówi!", "Ma wypchany brzuch (zapewne Babcią!)"
        ]
    wolf_special_quest.quest_condition = "Babcia uratowana"
    wolf_special_quest.quest_info = (
        "Jakaś Babcia wyskoczyła z wilczego brzucha!\
        \nMówi coś o Czerwonym Kapturku.. "
        )

    # Herszt bandytów (QUEST in lvl 1)
    ringleader = Enemy("Herszt bandytów", 40, 2, 2, "quest", [2], [3, 5])
    ringleader.attrib = (2, 3, 3, 3, 2)
    ringleader.treasure_dict = {
        "zabytkowy obraz": 1, "sztabka srebra": 3, "sztylet zwinności": 1
        }
    ringleader.speach_list = [
        "No co, chodź na solo!", "No dawaj mi tu!"
        ]
    ringleader.specials_list = [
        "Herszt bandy! ", "Straszna menda! ", "Sprytny jest.. "
        ]
    ringleader.quest_condition = "Zdobyto zabytkowy obraz"
    ringleader.quest_info = "Zdobyto obraz Sołtysa! Idź do niego po nagrodę.. "

    # Troll Silnoręki (QUEST in lvl 2)
    troll_strong_hand = Enemy(
        "Troll Silnoręki", 75, 4, 11, "quest", [2], [8, 12]
        )
    troll_strong_hand.attrib = (8, 2, 2, 2, 3)
    troll_strong_hand.treasure_dict = {
        "sztabka srebra": random.randint(0, 3),
        "rubin": random.randint(1, 8)
        }
    troll_strong_hand.speach_list = [
        "Chcesz pokonać przełęcz? Po moim trupie!",
        "A masz!", "Ja cie zjeść!",
        "(przeraźliwy ryk)"
        ]
    troll_strong_hand.specials_list = ["Przeraźliwy! ", "Śmierć się zbliża! "]
    troll_strong_hand.quest_info = (
        "Troll pokonany! Możesz przekroczyć portal! "
        )

    # list with all enemies - we use this in functions below
    # (to summon enemy by name):
    enemies_all_list = [
        wolf, hobgoblin, ratman, goblin, scoundrel, bear,
        ogr, troll, mountain_giant, werewolf, outlaw,
        thievish_bear_quest, wolf_special_quest, ringleader,
        troll_strong_hand
        ]

    # list with random enemies - we use this in functions below
    # (to random enemy using filters),
    # quest monsters are excluded:
    enemies_random_list = [
        wolf, ratman, goblin, hobgoblin, scoundrel, bear, ogr,
        troll, mountain_giant, werewolf, outlaw
        ]
    
    # if enemy name was specified, it will export enemy by given name:
    enemy_exported_to_main = ''
    if name:
        for element in enemies_all_list:
            if element.name == name:
                enemy = element

    # if enemy name wasn't specified, it will export random enemy
    # (random using optional filters - level, location, genre):
    else:
        enemy_random_list = []
        # temporary helper list
        for element in enemies_random_list:
            if (
                    (loc in element.location or loc is None) and
                    (lvl == element.level or lvl is None) and
                    (gen == element.genre or gen is None)
                    ):
                enemy_random_list.append(element)
        
        # export random enemy to main function:
        if loc:  # if location != None - filter enemy by location:
            enemy_filtered_by_location = [
                enemy for enemy in enemy_random_list if loc in enemy.location
                ]
            enemy = random.choice(enemy_filtered_by_location)

        else:
            enemy = random.choice(enemy_random_list)
    
    # cre (dictionary with attributes), e.g.:
    # {"siła": 2, "zwinność": 3...}
    # from enemy.attrib (tuple):
    create_enemy_attrib_dict(enemy)
    return enemy


def attack_points_calc(enemy=None):
    ''' calculates enemy attack ability '''
    enemy.attack = (
        2*enemy.attrib_dict["siła"] +
        2*enemy.attrib_dict["zwinność"] +
        enemy.attrib_dict["inteligencja"]
        )
    
    return enemy.attack


def defend_points_calc(enemy=None):
    ''' calculates enemy defend ability '''
    enemy.defend = (
        3*enemy.attrib_dict["zwinność"] +
        enemy.attrib_dict["siła"] +
        enemy.attrib_dict["inteligencja"] +
        enemy.act_armour
    ) 
    return enemy.defend


def combat_attribute_default(enemy=None):
    '''set default value of combat_attribute'''
    if enemy.attrib_dict["siła"] >= enemy.attrib_dict["zwinność"]:
        enemy.combat_attribute = "siła"
        return enemy.combat_attribute

    else:
        enemy.combat_attribute = "zwinność"
        return enemy.combat_attribute


def enemy_info(enemy):
    '''display shot info about enemy
    (imported from enemy specials_list and speach_list)'''
    if len(enemy.speach_list) > 0:
        print(enemy.name, "do Ciebie:", random.choice(enemy.speach_list)+'\n')
    if len(enemy.specials_list) > 0:
        print(enemy.name, "ma właściwość:", random.choice(enemy.specials_list))


def enemy_gold_reward(enemy):
    '''
    calculate gold from defeated enemy
    '''
    if enemy.genre != 'animal':
        # geometric increase from enemy level
        looted_gold = (enemy.level ** enemy.level) * random.randint(1, 5)

    else:
        looted_gold = 0
    
    return looted_gold


def create_enemy_attrib_dict(enemy):
    '''
    create attrib_dict (dictionary with attributes), e.g.:
    {"siła": 2, "zwinność": 3, "percepcja": 2,
    "inteligencja": 2, "siła woli": 2}
    from enemy.attrib (tuple, e.g.: (2, 3, 2, 2, 2)):
    '''

    enemy.attrib_dict = {}
    attributes = ("siła", "zwinność", "percepcja", "inteligencja", "siła woli")

    for number, element in enumerate(attributes):
        enemy.attrib_dict[element] = enemy.attrib[number]

    return enemy.attrib_dict






